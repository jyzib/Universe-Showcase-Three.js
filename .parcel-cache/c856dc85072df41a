{"mappings":";;;;;;;;;;ACAA,4BAAiB,QAAoB,6DAAuC,QAAQ;;;;ACApF,4BAAiB,QAAoB,2DAAqC,QAAQ;;;;ACAlF,4BAAiB,QAAoB,6DAAuC,QAAQ;;;AHKpF,MAAM,+BAAS,IAAI;AACnB,6BAAO,OAAO,CAAC,OAAO,UAAU,EAAC,OAAO,WAAW;AAEnD,MAAM,6BAAO,SAAS,aAAa,CAAC;AACpC,2BAAK,WAAW,CAAC,6BAAO,UAAU;AAGlC,MAAM,8BAAQ,IAAI;AAElB,MAAM,+BAAS,IAAI,+BACf,IACA,OAAO,UAAU,GAAC,OAAO,WAAW,EACpC,KACA;AAGJ,MAAM,sCAAgB,IAAI,CAAA,GAAA,0DAAY,EAAE,8BAAO,6BAAO,UAAU;AAEhE,MAAM,+BAAS,IAAI,wBAAiB;AACpC,oBAAoB;AACpB,6BAAO,QAAQ,CAAC,GAAG,CAAC,GAAE,GAAE;AACxB,oCAAc,MAAM;AACpB,MAAM,uCAAiB,IAAI,2BAAoB,IAAG;AAClD,MAAM,qCAAe,IAAI,kCAA2B;IAAC,OAAM;IAAS,MAAK;AAAgB;AACzF,MAAM,8BAAQ,IAAI,kBAAW,sCAAe;AAC5C,mBAAmB;AACnB,MAAM,qCAAe,IAAI,0BAAmB;AAC5C,4BAAM,GAAG,CAAC;AACV,MAAM,kCAAY,IAAI;AACtB,MAAM,iCAAW,IAAI;AAIrB,4BAAM,UAAU,GAAG,+BAAS,IAAI,CAAC;IAAC,CAAA,GAAA,gEAAG;IAAE,CAAA,GAAA,gEAAG;IAAE,CAAA,GAAA,gEAAG;IAAG,CAAA,GAAA,gEAAG;IAAE,CAAA,GAAA,gEAAG;IAAE,CAAA,GAAA,gEAAG;CAAE;AACjE,4DAA4D;AAE5D,sBAAsB;AAEtB,kCAAkC;AAClC,+DAA+D;AAC/D,uBAAuB;AAEvB,MAAM,mCAAa,IAAI,wBAAiB,UAAS,IAAG;AACpD,4BAAM,GAAG,CAAC;AACV,MAAM,oCAAc,IAAI,8BAAuB;AAC/C,4BAAM,GAAG,CAAC;AACV,4BAAM,QAAQ,CAAC,CAAC,GAAG,OAAO,KAAK,EAAE;AAEjC,MAAM,kCAAY,IAAI,4BAAqB,GAAE,IAAG;AAChD,MAAM,qCAAe,IAAI,+BAAwB;IAAC,OAAM;IAAS,WAAU;AAAK;AAChF,MAAM,+BAAS,IAAI,kBAAW,iCAAU;AACxC,MAAM,oCAAc,IAAI,4BAAqB,GAAE,IAAG;AAClD,MAAM,wCAAkB,IAAI,kCAA2B,CAAC;AACxD,MAAM,+BAAS,IAAI,kBAAW,mCAAY;AAC1C,6BAAO,QAAQ,CAAC,GAAG,GAAG,gCAAU,IAAI,CAAC,CAAA,GAAA,gEAAE;AAEvC,MAAM,+BAAS,IAAI;AAEnB,6BAAO,QAAQ,CAAC,GAAG,GAAG,gCAAU,IAAI,CAAC,CAAA,GAAA,gEAAI;AACzC,4BAAM,GAAG,CAAC;AACV,6BAAO,QAAQ,CAAC,CAAC,GAAG;AACpB,6BAAO,GAAG,CAAC;AACX,4BAAM,GAAG,CAAC;AAGV,SAAS;IACL,6BAAO,QAAQ,CAAC,CAAC,IAAI;IACrB,6BAAO,QAAQ,CAAC,CAAC,IAAI;IACrB,6BAAO,OAAO,CAAC;IACf,6BAAO,MAAM,CAAC,6BAAM;AACxB;AACA,6BAAO,gBAAgB,CAAC","sources":["js/main.js","node_modules/@parcel/runtime-js/lib/runtime-b955412263422928.js","node_modules/@parcel/runtime-js/lib/runtime-0d582f5132ab56e3.js","node_modules/@parcel/runtime-js/lib/runtime-0d7c11cd42aea778.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport {OrbitControls, OrbitControls} from \"three/examples/jsm/controls/OrbitControls\"\r\nimport star from '../stars.jpg'\r\nimport sun from '../sun.jpg'\r\nimport earth from '../earth.jpg'\r\nconst render = new THREE.WebGL1Renderer()\r\nrender.setSize(window.innerWidth,window.innerHeight)\r\n\r\nconst data = document.querySelector('.canvas')\r\ndata.appendChild(render.domElement)\r\n\r\n\r\nconst scene = new THREE.Scene()\r\n\r\nconst camera = new THREE.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth/window.innerHeight,\r\n    0.1,\r\n    1000\r\n\r\n)\r\nconst orbitControls = new OrbitControls(camera,render.domElement)\r\n\r\nconst axixes = new THREE.AxesHelper(5)\r\n// scene.add(axixes)\r\ncamera.position.set(0,2,5)\r\norbitControls.update()\r\nconst planeGemoutery = new THREE.PlaneGeometry(20,20)\r\nconst planeMatrial = new THREE.MeshStandardMaterial({color:0xffffff,side:THREE.DoubleSide})\r\nconst plane = new THREE.Mesh(planeGemoutery,planeMatrial)\r\n// scene.add(plane)\r\nconst ambientLight = new THREE.AmbientLight(0x333333)\r\nscene.add(ambientLight)\r\nconst textLoded = new THREE.TextureLoader()\r\nconst cubeText = new THREE.CubeTextureLoader()\r\n\r\n\r\n\r\nscene.background = cubeText.load([star,star,star ,star,star,star])\r\n// const dirLight = new THREE.DirectionalLight(0xffffff,0.8)\r\n\r\n// scene.add(dirLight)\r\n\r\n// dirLight.position.set(-30,50,0)\r\n// const dirHelper = new THREE.DirectionalLightHelper(dirLight)\r\n// scene.add(dirHelper)\r\n\r\nconst pointlight = new THREE.PointLight(0xffffff,50,300)\r\nscene.add(pointlight)\r\nconst helperpoint = new THREE.PointLightHelper(pointlight)\r\nscene.add(helperpoint)\r\nplane.rotation.x = -0.5 * Math.PI\r\n\r\nconst Spheregeo = new THREE.SphereGeometry(4,50,50)\r\nconst spharMatrial = new THREE.MeshBasicMaterial({color:0xffffff,wireframe:false})\r\nconst sphare = new THREE.Mesh(Spheregeo,spharMatrial)\r\nconst murcharygeo = new THREE.SphereGeometry(2,50,20)\r\nconst murcharymatrial = new THREE.MeshStandardMaterial({})\r\nconst murcha = new THREE.Mesh(murcharygeo,murcharymatrial)\r\nsphare.material.map = textLoded.load(sun)\r\n\r\nconst newObj = new THREE.Object3D()\r\n\r\nmurcha.material.map = textLoded.load(earth)\r\nscene.add(sphare)\r\nmurcha.position.x = 10\r\nnewObj.add(murcha)\r\nscene.add(newObj)\r\n\r\n\r\nfunction animations() {\r\n    sphare.rotation.y += 0.001\r\n    murcha.rotation.y += 0.001\r\n    newObj.rotateY(0.0002)\r\n    render.render(scene,camera)\r\n}\r\nrender.setAnimationLoop(animations)\r\n\r\n\r\n","module.exports = new __parcel__URL__(\"stars.051b6fcb.jpg\").toString();","module.exports = new __parcel__URL__(\"sun.bc66b6ae.jpg\").toString();","module.exports = new __parcel__URL__(\"earth.b3395f52.jpg\").toString();"],"names":[],"version":3,"file":"index.js.map"}